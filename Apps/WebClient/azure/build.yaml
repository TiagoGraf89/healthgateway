name: 1.0.0$(Rev:.r) #Build number

#Build variables
variables:
  App.Home: $(Build.SourcesDirectory)/Apps/WebClient
  App.Name: webclient
  App.FunctionalTests: $(App.Home)/functional

pr: none

trigger:
 batch: 'true'
 branches:
   include:
     - dev
 paths:
   include:
     - Apps/WebClient/src
     - Apps/WebClient/test
     - Apps/WebClient/azure/build.yaml
     - Apps/WebClient/Dockerfile
     - Apps/WebClient/functional
 
pool:
  name: 'HealthGateway'

steps:
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(App.Home)/src'

- script: |
    dotnet test test/test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
    npm --prefix src test
    dotnet sonarscanner begin /k:"webclient_dev" /v:$(Build.BuildNumber) /d:sonar.host.url="https://sonarqube-gateway.pathfinder.gov.bc.ca" /d:sonar.login="$(sonar.login)" /d:sonar.coverage.exclusions="**Tests*.cs" /d:sonar.testExecutionReportPaths="src/jest.out/test-report.xml" /d:sonar.typescript.lcov.reportPaths="jest.out/lcov.info" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.verbose=true
    dotnet build    
    dotnet sonarscanner end /d:sonar.login="$(sonar.login)"
    echo "$@" >&2
  displayName: 'Perform static analisis'
  continueOnError: 'false'
  workingDirectory: $(Build.SourcesDirectory)/Apps/WebClient

- task: DotNetCoreCLI@2
  inputs:
    modifyOutputPath: false
    command: 'publish'
    publishWebProjects: false
    projects: '$(App.Home)/src'
    arguments: '-o $(Build.BinariesDirectory)'
    zipAfterPublish: false

- script: |
    cp $(App.Home)/Dockerfile $(Build.BinariesDirectory)
    oc process -f $(Build.SourcesDirectory)/Tools/BaseBuild/build.yaml -p NAME=$(App.Name) | oc apply -f -
    oc start-build $(App.Name) --wait --follow --from-dir $(Build.BinariesDirectory) 
    oc tag $(App.Name):latest $(App.Name):$(Build.BuildNumber)
    echo `date` > $(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).txt
  displayName: 'Build OpenShift Image and push to Image Stream'

# - task: Npm@1
#   inputs:
#     command: 'install'
#     workingDir: '$(App.FunctionalTests)'

# - script: |
#     oc process -f $(Build.SourcesDirectory)/Tools/BaseBuild/deployment.yaml -p APP_NAME=functionaltests -p ENV=tools -p IMAGE="webclient:$(Build.BuildNumber)" | oc apply --wait -f -
#     oc rollout status dc/functionaltests -w
#     npm test
#     echo "$@" >&2
#   displayName: 'Perform functional tests'
#   continueOnError: 'false'
#   workingDirectory: $(App.FunctionalTests)

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'

